#  ┌────────────────────────────────────────────────────────────────────────────────────────────────────────┐
#  │ Purpose:                                                                                               │
#  │ - Runs checks on commits from feature branches, including:                                             │
#  │    - Placing a label on PR                                                                             │
#  │    - Running lint checks on each commit                                                                │
#  │    - Check for existing Release PR that are open on staging                                            │
#  │ - When changes are good, merge to staging queue to run testing (or trigger testing manually):                                        │
#  │    - If testing is good -> Merge to staging branch                                                     │
#  │    - Else               -> reject PR - user will correct errors and resubmit PR to the staging queue   │
#  └────────────────────────────────────────────────────────────────────────────────────────────────────────┘

name: 0 - Run Checks & Test Changes

# Pipeline permissions
permissions:
  contents: read
  pull-requests: write
  issues: read

# When to run:
on:
  ## Trigger Jobs on PR
  pull_request:
    branches:
      - staging
      - main
    types:
      - opened
      - synchronize
      - edited
  ## Trigger Jobs on Merge Queue
  merge_group:
    types:
      - checks_requested
  ## Trigger Jobs manually
  workflow_dispatch:

# Jobs to Run:
jobs:
  # ┌─────────────────────────────────────────────────────────────────────────────┐
  # │   Run jobs for commits to WIP PR                                            │
  # └─────────────────────────────────────────────────────────────────────────────┘
  label-pr:
    name: Label PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v5
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
          lfs: true

      - name: Prereq - Grab changed files
        id: changed-files
        uses: tj-actions/changed-files@main

      - name: Backend - Lint Testing
        uses: golangci/golangci-lint-action@v6.5.1

      - name: Precommit - Lint Testing
        uses: pre-commit/action@release
        env:
          SKIP: golangci-lint # using gh action instead
        with:
          extra_args: --files ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Fail-catch - Pre-commit Checks
        if: ${{ failure() && steps.precommit.conclusion == 'failure' }}
        uses: actions/github-script@main
        with:
          script: |
            core.setFailed("Run `pre-commit run -a` to fix errors locally before re-committing")

  # ┌─────────────────────────────────────────────────────────────────────────────┐
  # │   Run jobs on Merge Queue or PR Comment 'test'                              │
  # └─────────────────────────────────────────────────────────────────────────────┘
  check_existing_pr:
    name: Check for existing Release PR
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'merge_group' && github.event.action == 'enqueued')
    runs-on: ubuntu-latest
    steps:
      - name: Check for Open Release PRs
        uses: juliangruber/find-pull-request-action@v1
        id: find-prs
        with:
          branch: staging
          state: open
      - name: Confirm/Deny Merge
        run: |
          if [ -n "${{ steps.find-prs.outputs.number }}" ]; then
            echo "Merge is rejected - There is Release PR #${{ steps.find-prs.outputs.number }} currently on staging."
            echo "Please merge or close it before merging into this branch - to prevent piling commits to a single PR"
            echo "Note: If you want to update existing PR - you must send the commit back to it's feature branch and undo commit on staging"
            exit 1
          else
            echo "Changes are ready for merge..."
          fi
  test:
    name: Test Changes
    needs: check_existing_pr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
          lfs: true

      - name: Fetch Doppler Secrets
        id: doppler
        uses: dopplerhq/secrets-fetch-action@main
        with:
          doppler-token: ${{ secrets.DEV_DOPPLER_TOKEN }}
          inject-env-vars: true

  # ┌───────────────────────────────────────────────────────────────────────┐
  # │ Install Dependencies                                                  │
  # └───────────────────────────────────────────────────────────────────────┘
      - name: Backend - Install Encore
        run: |
          curl -L https://encore.dev/install.sh | bash
          echo 'export PATH=$PATH:$HOME/.encore/bin' >> $GITHUB_ENV

      - name: Setup other deps
        run: |
          echo "Installing go-junit-report"
          go install github.com/jstemmer/go-junit-report@latest
          echo 'export PATH=$PATH:$HOME/.go/bin' >> $GITHUB_ENV

          echo "Creating test-results directory"
          mkdir -p test-results

      - name: Frontend - Install Node.js deps
        run: npm install
        working-directory: ./frontend

      - name: Run tests
        run: |
          encore test ./note ./pexels -cover | go-junit-report -set-exit-code > test-results/backend-report.xml


  # ┌──────────────────────────────────────────────────────────────────────────┐
  # │ Perform testing                                                          │
  # └──────────────────────────────────────────────────────────────────────────┘
      - name: Test Backend - Encore.Go
        run: encore test ./note ./pexels -cover | go-junit-report -set-exit-code > test-results/backend-report.xml

      - name: Test Frontend - Node/Jest
        run: npm test
        working-directory: ./frontend

  # ┌───────────────────────────────────────────────────────────────────────┐
  # │ Post Results                                                          │
  # └───────────────────────────────────────────────────────────────────────┘
      - name: Publish Test Results
        id: test-report
        uses: dorny/test-reporter@main
        if: success() || failure()  # Produce test report, pass or fail
        with:
          name: Test Results # Name of the check run which will be created
          path: "**/test-results/*.xml" # Path to test results
          reporter: jest-junit # Use jest-junit for frontend tests
          fail-on-error: "false"
