#  ┌────────────────────────────────────────────────────────────────────────────────────┐
#  │ Purpose:                                                                           │
#  │ - Triggers workflow for deploying release to PROD                                  │
#  │ - Sends a message on PR - to confirm deployment to user                            │
#  └────────────────────────────────────────────────────────────────────────────────────┘
name: 2 - Release to Production

# Enforces main branch = prod env
on:
  workflow_dispatch: # manual run fallback
  push:
    branches:
      - main

# Permissions to write on PR
permissions: write-all

jobs:
  build:
    name: Build Release
    environment: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
          lfs: true

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@master

      - name: Fetch Doppler Secrets
        id: doppler
        uses: dopplerhq/secrets-fetch-action@main
        with:
          doppler-token: ${{ secrets.PROD_DOPPLER_TOKEN }}
          inject-env-vars: true

      - name: Set App version - by Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          ci: true

      - name: Confirm new release (fail-catch)
        if: steps.semantic.outputs.new_release_published == 'false'
        uses: actions/github-script@main
        with:
          script: |
            core.setFailed("Semantic version hasn't released a new version. See logs.")

      - name: Save Semantic Version in Doppler
        run: |
          doppler secrets set SEMANTIC_VERSION="${{ steps.semantic.outputs.new_release_version }}"
        env:
          DOPPLER_TOKEN: ${{ secrets.PROD_DOPPLER_TOKEN }}

      - name: Backend - Build & Push image
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/note-app-backend
          IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }}
        run: |
          encore build -t $IMAGE_NAME:$IMAGE_TAG --config encore.prod.json
          docker push $IMAGE_NAME:$IMAGE_TAG

      - name: Frontend - Build & Push image
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/note-app-frontend
          IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }}
        run: |
          cd frontend
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG

  deploy:
    name: Release Production
    needs: build
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Doppler Secrets
        id: doppler
        uses: dopplerhq/secrets-fetch-action@main
        with:
          doppler-token: ${{ secrets.PROD_DOPPLER_TOKEN }}
          inject-env-vars: true

      - uses: alexellis/arkade-get@master
        with:
          yq: latest

      - name: Checkout Helm Chart
        uses: actions/checkout@main
        with:
          repository: jomakori/gke_GitOps
          token: ${{ steps.doppler.outputs.GITHUB_TOKEN }}

      - name: Deploy Release
        env:
          CONTAINER_TAG: ${{ steps.doppler.outputs.SEMANTIC_VERSION }} # value refreshed in step
        run: |
          # Login Git
          git config --global user.email "joe3rdwash@gmail.com"
          git config --global user.name "Joel Makori"

          # Backend - Update image tag in Helm Chart
          cd apps/helm/notes-app-backend
          yq -i e '.environments[1].image.tag = env(CONTAINER_TAG)| (... | select(tag == "!!merge")) tag = ""' values.yaml

          # Frontend - Update image tag in Helm Chart
          cd ../notes-app-frontend
          yq -i e '.environments[1].image.tag = env(CONTAINER_TAG)| (... | select(tag == "!!merge")) tag = ""' values.yaml

          # Confirm changes
          if [[ -z $(git status -s) ]]; then
            echo "The container tags have already been updated to: $(IMAGE_TAG). Deployment skipped..."
            exit 0
          fi

          # Push Changes - ArgoCD will auto-sync changes in cluster
          git add .
          git commit -m "release(PROD) notes-app: Upgraded PROD to: ${CONTAINER_TAG}"
          git push
