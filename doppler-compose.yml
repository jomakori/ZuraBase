---
# pass env secrets - doppler
x-doppler: &doppler-env
  environment:
  {{- range $key, $value := . }}
      {{$key}}: "{{$value}}"
  {{- end }}

# Run app + dependent services
services:
  backend:
    <<: *doppler-env ## injects doppler secrets
    image: zurabase:backend
    build:
      context: backend
      dockerfile: Dockerfile
    platform: linux/amd64 # run/build as amd64
    ports:
      - 8080:8080
    command: ["./main"]
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://backend:8080/health || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 5

  frontend:
    <<: *doppler-env ## injects doppler secrets
    image: zurabase:frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    platform: linux/amd64 # run/build as amd64
    ports:
      - 5173:5173
      - 8181:8181
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173 || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 5

  db:
    <<: *doppler-env ## injects doppler secrets
    image: mongo:8.0
    platform: linux/amd64 # run as amd64
    ports:
      - 27017:27017
    volumes:
      - db_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 2s
      retries: 5

  backend-test:
    <<: *doppler-env
    image: zurabase:backend
    build:
      context: backend
      dockerfile: Dockerfile
    platform: linux/amd64 # run/build as amd64
    depends_on:
      backend:
        condition: service_healthy
    command:
      - /bin/sh
      - -c
      - |
        gotestsum --junitfile test-results/backend-report.xml ./tests     # Create tests report with gotestsum
        gotestsum --format testname ./tests                               # Confirm tests success or fail with readable output
    volumes:
      - ./test-results:/app/test-results

volumes:
  db_data:
